{"env_info": "sys.platform: linux\nPython: 3.10.16 (main, Dec 11 2024, 16:24:50) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (GCC) 11.2.1 20220127 (Red Hat 11.2.1-9)\nPyTorch: 2.5.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v3.5.3 (Git Hash 66f0cb9eb66affd2da3bf5f8d897376f04aae6af)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 90.1\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DLIBKINETO_NOXPUPTI=ON -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, TORCH_VERSION=2.5.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, \n\nTorchVision: 0.20.1\nOpenCV: 4.11.0\nMMCV: 1.7.2\nMMCV Compiler: GCC 11.2\nMMCV CUDA Compiler: not available\nMMSegmentation: 0.30.0+87c7791", "seed": 42, "exp_name": "night_base.py", "mmseg_version": "0.30.0+87c7791", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nmodel = dict(\n    type='DTP',\n    pretrained=None,\n    backbone=dict(\n        type='SwinTransformer',\n        pretrain_img_size=192,\n        embed_dims=128,\n        patch_size=4,\n        window_size=6,\n        mlp_ratio=4,\n        depths=[2, 2, 18, 2],\n        num_heads=[4, 8, 16, 32],\n        strides=(4, 2, 2, 2),\n        out_indices=(0, 1, 2, 3),\n        qkv_bias=True,\n        qk_scale=None,\n        patch_norm=True,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        use_abs_pos_embed=False,\n        act_cfg=dict(type='GELU'),\n        norm_cfg=dict(type='LN', requires_grad=True),\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'checkpoints/simmim_pretrain__swin_base__img192_window6__800ep.pth'\n        )),\n    decode_head=dict(\n        type='IAParser',\n        in_channels=[128, 256, 512, 1024],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=1.0,\n            avg_non_ignore=True),\n        illumination_channels=128,\n        illumination_features_channels=64),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=384,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='slide', crop_size=(512, 1024), stride=(341, 683)),\n    disturb_beta='uniform',\n    disentangle_loss=dict(type='PixelLoss', loss_weight=0.1, loss_type='L1'),\n    disentangle_head=dict(\n        type='SODHead',\n        channels=32,\n        in_channels=4,\n        ill_embeds_op='-',\n        clip=False,\n        norm_cfg=dict(type='IN2d', requires_grad=True),\n        init_cfg=dict(\n            type='Kaiming',\n            override=dict(\n                type='Constant',\n                layer='Conv2d',\n                name='reflectance_output',\n                val=0.0,\n                bias=0.5)),\n        loss_smooth=dict(type='SmoothLoss', loss_weight=0.01),\n        loss_retinex=dict(type='PixelLoss', loss_weight=1.0, loss_type='L2')))\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(256, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(256, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\nnightlab_train = dict(\n    type='NightcityDataset',\n    data_root='data/nightcity-fine/train',\n    img_dir='img',\n    ann_dir='lbl',\n    pipeline=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations'),\n        dict(type='Resize', img_scale=(1024, 512), ratio_range=(0.5, 2.0)),\n        dict(type='RandomCrop', crop_size=(256, 512), cat_max_ratio=0.75),\n        dict(type='RandomFlip', prob=0.5),\n        dict(type='PhotoMetricDistortion'),\n        dict(\n            type='Normalize',\n            mean=[123.675, 116.28, 103.53],\n            std=[58.395, 57.12, 57.375],\n            to_rgb=True),\n        dict(type='Pad', size=(256, 512), pad_val=0, seg_pad_val=255),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n    ])\nnightlab_test = dict(\n    type='NightcityDataset',\n    data_root='data/nightcity-fine/val',\n    img_dir='img',\n    ann_dir='lbl',\n    pipeline=[\n        dict(type='LoadImageFromFile'),\n        dict(\n            type='MultiScaleFlipAug',\n            img_scale=(1024, 512),\n            flip=False,\n            transforms=[\n                dict(type='Resize', keep_ratio=True),\n                dict(type='RandomFlip'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='ImageToTensor', keys=['img']),\n                dict(type='Collect', keys=['img'])\n            ])\n    ])\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='DTPDataset',\n        datasetA=dict(\n            type='NightcityDataset',\n            data_root='data/nightcity-fine/train',\n            img_dir='img',\n            ann_dir='lbl',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(\n                    type='Resize',\n                    img_scale=(1024, 512),\n                    ratio_range=(0.5, 2.0)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(256, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(256, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        datasetB=dict(\n            type='NightcityDataset',\n            data_root='data/nightcity-fine/train',\n            img_dir='img',\n            ann_dir='lbl',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(\n                    type='Resize',\n                    img_scale=(1024, 512),\n                    ratio_range=(0.5, 2.0)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(256, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(256, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ])),\n    val=dict(\n        type='NightcityDataset',\n        data_root='data/nightcity-fine/val',\n        img_dir='img',\n        ann_dir='lbl',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='NightcityDataset',\n        data_root='data/nightcity-fine/val',\n        img_dir='img',\n        ann_dir='lbl',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False),\n        dict(type='TensorboardLoggerHook')\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(type='Fp16OptimizerHook', loss_scale='dynamic')\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=60000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=3)\nevaluation = dict(\n    interval=2000, metric='mIoU', pre_eval=True, save_best='mIoU')\ncheckpoint_file = 'checkpoints/simmim_pretrain__swin_base__img192_window6__800ep.pth'\nfp16 = dict()\nfind_unused_parameters = True\ngpu_ids = range(0, 2)\nload_from = None\nresume_from = 'work_dirs/night_base/latest.pth'\nauto_resume = False\nwork_dir = './work_dirs/night_base'\ndevice = 'cuda'\nseed = 42\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]], "hook_msgs": {}}
